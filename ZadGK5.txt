import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.awt.GLJPanel;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.gl2.GLUT;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JFrame;

class Lab5 extends GLJPanel implements GLEventListener, KeyListener {
    private int objectNumber = 1;
    private boolean useAnaglyph = false;
    private int rotateX = 0;
    private int rotateY = 0;
    private int rotateZ = 0;
    private GLUT glut = new GLUT();
    private GLU glu = new GLU();
    private double radius = 5.0D;
    private double angle = 0.0D;
    private float x = 0.0F;
    private float z = 0.0F;

    public static void main(String[] args) {
        JFrame window = new JFrame("Some Objects in 3D");
        Lab5 panel = new Lab5();
        window.setContentPane(panel);
        window.pack();
        window.setResizable(false);
        window.setLocation(50, 50);
        window.setDefaultCloseOperation(3);
        window.setVisible(true);
    }

    public Lab5() {
        super(new GLCapabilities((GLProfile)null));
        this.setPreferredSize(new Dimension(700, 700));
        this.addGLEventListener(this);
        this.addKeyListener(this);
    }

    private void draw(GL2 gl2) {
        gl2.glRotatef((float)this.rotateZ, 0.0F, 0.0F, 1.0F);
        gl2.glRotatef((float)this.rotateY, 0.0F, 1.0F, 0.0F);
        gl2.glRotatef((float)this.rotateX, 1.0F, 0.0F, 0.0F);
        if (this.objectNumber == 1) {
            this.Corksrew(gl2, 1, 8);
        } else if (this.objectNumber == 2) {
            this.Piramid(gl2, 3.0D);
        }

    }

    public void Corksrew(GL2 gl2, int radius, int numberOfTurns) {
        gl2.glClear(16384);
        int numVertices = numberOfTurns * 200;
        double angleIncrement = (double)numberOfTurns * 3.141592653589793D / (double)numVertices;
        float height = 0.0F;
        gl2.glBegin(9);

        for(int i = 1; i <= numVertices; ++i) {
            this.angle = (double)i * angleIncrement * 3.141592653589793D;
            gl2.glColor3f(this.x / 0.6F, (this.x + this.z) * this.x / 0.4F, this.z / 0.5F);
            this.x = (float)((double)radius * Math.cos(this.angle));
            this.z = (float)((double)radius * Math.sin(this.angle));
            gl2.glVertex3f(this.x, height, this.z);
            height += (float)numberOfTurns / 3000.0F;
        }

        gl2.glEnd();
        gl2.glTranslated(0.0D, (double)height, -4.5D);
        this.glu.gluCylinder(this.glu.gluNewQuadric(), 1.3D, 1.3D, 9.0D, 100, 50);
    }

    public void Polygon(GL2 gl2, int numVertices) {
        gl2.glClear(16384);
        gl2.glBegin(9);
        double angleIncrement = 6.283185307179586D / (double)numVertices;

        for(int i = 1; i <= numVertices; ++i) {
            gl2.glColor3f(this.x / 0.6F, (this.x + this.z) * this.x / 0.4F, this.z / 0.5F);
            this.x = (float)(this.radius * Math.cos(this.angle));
            this.z = (float)(this.radius * Math.sin(this.angle));
            gl2.glVertex3f(this.x, -2.0F, this.z);
            this.angle = (double)i * angleIncrement;
        }

        gl2.glEnd();
    }

    public void Triangle(GL2 gl2) {
        gl2.glBegin(4);
        gl2.glColor3f(0.0F, 1.0F, 1.0F);
        gl2.glVertex3f(-1.45F, -2.0F, 0.0F);
        gl2.glColor3f(0.0F, -1.3F, 1.0F);
        gl2.glVertex3f(0.0F, 5.0F, -4.85F);
        gl2.glColor3f(1.0F, 1.65F, 0.8F);
        gl2.glVertex3f(1.45F, -2.0F, 0.0F);
        gl2.glEnd();
    }

    public void Piramid(GL2 gl2, double size) {
        gl2.glBegin(6);
        int n = 8;
        gl2.glVertex3f(0.0F, 6.0F, 0.0F);
        gl2.glVertex3f(1.0F, 0.0F, 0.0F);

        int i;
        for(i = 0; i < n; ++i) {
            gl2.glColor3f(0.0F, 0.0F, 1.0F);
            gl2.glVertex3f((float)(Math.cos((double)(i * 2) * 3.141592653589793D / (double)n) * size), 0.0F, (float)(Math.sin((double)(i * 2) * 3.141592653589793D / (double)n) * size));
            gl2.glColor3f(0.0F, 1.0F, 0.0F);
            gl2.glVertex3f((float)(Math.cos((double)((i + 1) * 2) * 3.141592653589793D / (double)n) * size), 0.0F, (float)(Math.sin((double)((i + 1) * 2) * 3.141592653589793D / (double)n) * size));
        }

        gl2.glEnd();
        gl2.glBegin(9);
        gl2.glVertex3f(0.0F, 0.0F, 0.0F);

        for(i = 0; i < n; ++i) {
            gl2.glColor3f(1.0F, 0.0F, 1.0F);
            gl2.glVertex3f((float)(Math.cos((double)(i * 2) * 3.141592653589793D / (double)n) * size), 0.0F, (float)(Math.sin((double)(i * 2) * 3.141592653589793D / (double)n) * size));
            gl2.glColor3f(0.0F, 0.0F, 1.0F);
            gl2.glVertex3f((float)(Math.cos((double)((i + 1) * 2) * 3.141592653589793D / (double)n) * size), 0.0F, (float)(Math.sin((double)((i + 1) * 2) * 3.141592653589793D / (double)n) * size));
        }

        gl2.glEnd();
    }

    public void display(GLAutoDrawable drawable) {
        GL2 gl2 = drawable.getGL().getGL2();
        if (this.useAnaglyph) {
            gl2.glDisable(2903);
            gl2.glMaterialfv(1032, 5634, new float[]{1.0F, 1.0F, 1.0F, 1.0F}, 0);
        } else {
            gl2.glEnable(2903);
        }

        gl2.glNormal3f(0.0F, 0.0F, 1.0F);
        gl2.glClearColor(0.0F, 0.0F, 0.0F, 1.0F);
        gl2.glClear(16640);
        if (!this.useAnaglyph) {
            gl2.glLoadIdentity();
            gl2.glTranslated(0.0D, 0.0D, -15.0D);
            this.draw(gl2);
        } else {
            gl2.glLoadIdentity();
            gl2.glColorMask(true, false, false, true);
            gl2.glRotatef(4.0F, 0.0F, 1.0F, 0.0F);
            gl2.glTranslated(1.0D, 0.0D, -15.0D);
            this.draw(gl2);
            gl2.glColorMask(true, false, false, true);
            gl2.glClear(256);
            gl2.glLoadIdentity();
            gl2.glRotatef(-4.0F, 0.0F, 1.0F, 0.0F);
            gl2.glTranslated(-1.0D, 0.0D, -15.0D);
            gl2.glColorMask(false, true, true, true);
            this.draw(gl2);
            gl2.glColorMask(true, true, true, true);
        }

    }

    public void init(GLAutoDrawable drawable) {
        GL2 gl2 = drawable.getGL().getGL2();
        gl2.glMatrixMode(5889);
        gl2.glFrustum(-3.5D, 3.5D, -3.5D, 3.5D, 5.0D, 25.0D);
        gl2.glMatrixMode(5888);
        gl2.glEnable(2896);
        gl2.glEnable(16384);
        gl2.glLightfv(16384, 4609, new float[]{0.7F, 0.7F, 0.7F}, 0);
        gl2.glLightModeli(2898, 1);
        gl2.glEnable(2929);
        gl2.glLineWidth(3.0F);
    }

    public void dispose(GLAutoDrawable drawable) {
    }

    public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height) {
    }

    public void keyPressed(KeyEvent evt) {
        int key = evt.getKeyCode();
        boolean repaint = true;
        if (key == 37) {
            this.rotateY -= 6;
        } else if (key == 39) {
            this.rotateY += 6;
        } else if (key == 40) {
            this.rotateX += 6;
        } else if (key == 38) {
            this.rotateX -= 6;
        } else if (key == 33) {
            this.rotateZ += 6;
        } else if (key == 34) {
            this.rotateZ -= 6;
        } else if (key == 36) {
            this.rotateX = this.rotateY = this.rotateZ = 0;
        } else if (key == 49) {
            this.objectNumber = 1;
        } else if (key == 50) {
            this.objectNumber = 2;
        } else if (key == 51) {
            this.objectNumber = 3;
        } else if (key == 52) {
            this.objectNumber = 4;
        } else if (key == 53) {
            this.objectNumber = 5;
        } else if (key == 54) {
            this.objectNumber = 6;
        } else if (key == 32) {
            this.useAnaglyph = !this.useAnaglyph;
        } else {
            repaint = false;
        }

        if (repaint) {
            this.repaint();
        }

    }

    public void keyReleased(KeyEvent evt) {
    }

    public void keyTyped(KeyEvent evt) {
    }
}